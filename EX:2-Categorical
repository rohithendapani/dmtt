from sklearn.tree import DecisionTreeClassifier, plot_tree 
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import StandardScaler, LabelEncoder 
import matplotlib.pyplot as plt 
import pandas as pd 
import numpy as np 
data = { 
'Age': [12,13,14,15,17,19,20,21,29,45], 
'Gender': ["F","F","F","M","M","F","M","M","F","F"], 
'Eligibility' : ["No","No","No","No","No","Yes","Yes","Yes","Yes","Yes"] 
} 
df = pd.DataFrame(data) 
le = LabelEncoder() 
df['Gender'] = le.fit_transform(df['Gender']) 
X = df[['Age','Gender']] 
y = df['Eligibility'] 
scaler = StandardScaler() 
X_scaled = scaler.fit_transform(X) 
X_train, X_test, y_train, y_test = train_test_split(X_scaled,y, test_size=0.3) 
model = DecisionTreeClassifier() 
model.fit(X_train,y_train) 
age = float(input("Enter age: ")) 
gender = input("Enter gender: ") 
“”” 
I commented out the following as this is optional to display the decision tree (based on the 
ques) 
plt.figure(figsize=(10,3)) 
plot_tree(model, 
feature_names = ["Age","Gender"], 
class_names = ["No","Yes"]) 
“”” 
gender_en = le.transform([gender])[0] 
user_data = scaler.transform([[age,gender_en]]) 
prediction = model.predict(user_data)[0] 
print(f'The prediction for age {age} and gender {gender} is {prediction}') 
if prediction == "Yes": 
print("Eligible for Voting") 
else: 
print("Not eligible for voting")
